{"ast":null,"code":"var _jsxFileName = \"/Users/trinhdacquang/React/tikgames/src/pages/supportPage.jsx\";\nimport React, { useEffect } from \"react\";\nexport default function SupportPage() {\n  useEffect(() => {\n    const script = document.createElement(\"script\");\n    script.src = \"/assets/js/mdb.min.js\";\n    script.async = true;\n    document.body.appendChild(script);\n    return () => script.remove();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"text-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, \"H\\u1ED7 tr\\u1EE3\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md col-md-12 col-lg-8 col-xl-6 mx-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"accordion accordion-flush\",\n    id: \"accordionExample\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"accordion-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"accordion-header\",\n    id: \"headingOne\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"accordion-button\",\n    type: \"button\",\n    \"data-mdb-toggle\": \"collapse\",\n    \"data-mdb-target\": \"#collapseOne\",\n    \"aria-expanded\": \"true\",\n    \"aria-controls\": \"collapseOne\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 15\n    }\n  }, \"L\\xE0m th\\u1EBF n\\xE0o \\u0111\\u1EC3 hi\\u1EC3n th\\u1ECB Game l\\xEAn Livestream Tiktok\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"collapseOne\",\n    className: \"accordion-collapse collapse show\",\n    \"aria-labelledby\": \"headingOne\",\n    \"data-mdb-parent\": \"#accordionExample\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"accordion-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }, \"This is the first item's accordion body.\"), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\", \" \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, \".accordion-body\"), \", though the transition does limit overflow.\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"accordion-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"accordion-header\",\n    id: \"headingTwo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"accordion-button collapsed\",\n    type: \"button\",\n    \"data-mdb-toggle\": \"collapse\",\n    \"data-mdb-target\": \"#collapseTwo\",\n    \"aria-expanded\": \"false\",\n    \"aria-controls\": \"collapseTwo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }\n  }, \"Accordion Item #2\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"collapseTwo\",\n    className: \"accordion-collapse collapse\",\n    \"aria-labelledby\": \"headingTwo\",\n    \"data-mdb-parent\": \"#accordionExample\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"accordion-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }, \"This is the second item's accordion body.\"), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\", \" \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, \".accordion-body\"), \", though the transition does limit overflow.\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"accordion-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"accordion-header\",\n    id: \"headingThree\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"accordion-button collapsed\",\n    type: \"button\",\n    \"data-mdb-toggle\": \"collapse\",\n    \"data-mdb-target\": \"#collapseThree\",\n    \"aria-expanded\": \"false\",\n    \"aria-controls\": \"collapseThree\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  }, \"Accordion Item #3\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"collapseThree\",\n    className: \"accordion-collapse collapse\",\n    \"aria-labelledby\": \"headingThree\",\n    \"data-mdb-parent\": \"#accordionExample\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"accordion-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, \"This is the third item's accordion body.\"), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\", \" \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, \".accordion-body\"), \", though the transition does limit overflow.\"))))));\n}","map":{"version":3,"names":["React","useEffect","SupportPage","script","document","createElement","src","async","body","appendChild","remove"],"sources":["/Users/trinhdacquang/React/tikgames/src/pages/supportPage.jsx"],"sourcesContent":["import React, { useEffect } from \"react\"\n\nexport default function SupportPage() {\n  useEffect(() => {\n    const script = document.createElement(\"script\")\n\n    script.src = \"/assets/js/mdb.min.js\"\n    script.async = true\n\n    document.body.appendChild(script)\n\n    return () => script.remove()\n  }, [])\n  return (\n    <div className=\"row\">\n      <h5 className=\"text-light\">Hỗ trợ</h5>\n      <div className=\"col-md col-md-12 col-lg-8 col-xl-6 mx-auto\">\n        <div className=\"accordion accordion-flush\" id=\"accordionExample\">\n          <div className=\"accordion-item\">\n            <h2 className=\"accordion-header\" id=\"headingOne\">\n              <button\n                className=\"accordion-button\"\n                type=\"button\"\n                data-mdb-toggle=\"collapse\"\n                data-mdb-target=\"#collapseOne\"\n                aria-expanded=\"true\"\n                aria-controls=\"collapseOne\"\n              >\n                Làm thế nào để hiển thị Game lên Livestream Tiktok\n              </button>\n            </h2>\n            <div\n              id=\"collapseOne\"\n              className=\"accordion-collapse collapse show\"\n              aria-labelledby=\"headingOne\"\n              data-mdb-parent=\"#accordionExample\"\n            >\n              <div className=\"accordion-body\">\n                <strong>This is the first item's accordion body.</strong> It is\n                hidden by default, until the collapse plugin adds the\n                appropriate classes that we use to style each element. These\n                classes control the overall appearance, as well as the showing\n                and hiding via CSS transitions. You can modify any of this with\n                custom CSS or overriding our default variables. It's also worth\n                noting that just about any HTML can go within the{\" \"}\n                <strong>.accordion-body</strong>, though the transition does\n                limit overflow.\n              </div>\n            </div>\n          </div>\n          <div className=\"accordion-item\">\n            <h2 className=\"accordion-header\" id=\"headingTwo\">\n              <button\n                className=\"accordion-button collapsed\"\n                type=\"button\"\n                data-mdb-toggle=\"collapse\"\n                data-mdb-target=\"#collapseTwo\"\n                aria-expanded=\"false\"\n                aria-controls=\"collapseTwo\"\n              >\n                Accordion Item #2\n              </button>\n            </h2>\n            <div\n              id=\"collapseTwo\"\n              className=\"accordion-collapse collapse\"\n              aria-labelledby=\"headingTwo\"\n              data-mdb-parent=\"#accordionExample\"\n            >\n              <div className=\"accordion-body\">\n                <strong>This is the second item's accordion body.</strong> It is\n                hidden by default, until the collapse plugin adds the\n                appropriate classes that we use to style each element. These\n                classes control the overall appearance, as well as the showing\n                and hiding via CSS transitions. You can modify any of this with\n                custom CSS or overriding our default variables. It's also worth\n                noting that just about any HTML can go within the{\" \"}\n                <strong>.accordion-body</strong>, though the transition does\n                limit overflow.\n              </div>\n            </div>\n          </div>\n          <div className=\"accordion-item\">\n            <h2 className=\"accordion-header\" id=\"headingThree\">\n              <button\n                className=\"accordion-button collapsed\"\n                type=\"button\"\n                data-mdb-toggle=\"collapse\"\n                data-mdb-target=\"#collapseThree\"\n                aria-expanded=\"false\"\n                aria-controls=\"collapseThree\"\n              >\n                Accordion Item #3\n              </button>\n            </h2>\n            <div\n              id=\"collapseThree\"\n              className=\"accordion-collapse collapse\"\n              aria-labelledby=\"headingThree\"\n              data-mdb-parent=\"#accordionExample\"\n            >\n              <div className=\"accordion-body\">\n                <strong>This is the third item's accordion body.</strong> It is\n                hidden by default, until the collapse plugin adds the\n                appropriate classes that we use to style each element. These\n                classes control the overall appearance, as well as the showing\n                and hiding via CSS transitions. You can modify any of this with\n                custom CSS or overriding our default variables. It's also worth\n                noting that just about any HTML can go within the{\" \"}\n                <strong>.accordion-body</strong>, though the transition does\n                limit overflow.\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}